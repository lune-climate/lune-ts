// =========================================================================================
//
// This file is AUTO-GENERATED by https://github.com/lune-climate/openapi-typescript-codegen
//
// In most cases you DON'T WANT TO MAKE MANUAL CHANGES to it â€“ they WILL BE OVERWRITTEN.
//
// =========================================================================================

/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { EmissionFactorLogicalUnit } from '../models/EmissionFactorLogicalUnit.js'
import type { EmissionFactorRegions } from '../models/EmissionFactorRegions.js'
import type { EmissionFactorSource } from '../models/EmissionFactorSource.js'
import type { PaginatedEmissionFactors } from '../models/PaginatedEmissionFactors.js'

import { ClientConfig } from '../core/ClientConfig.js'
import { request as __request } from '../core/request.js'
import { SuccessResponse } from '../core/SuccessResponse.js'
import { ApiError } from '../core/ApiError.js'
import { AxiosInstance } from 'axios'
import { Result } from 'ts-results-es'

export abstract class EmissionFactorsService {
    protected abstract client: AxiosInstance
    protected abstract config: ClientConfig

    /**
     * List emission factors
     * @param data Request data
     * @param options Additional operation options
     * @returns PaginatedEmissionFactors OK
     */
    public listEmissionFactors(
        data?: {
            /**
             * Maximum number of resources to return, between 1 and 100.
             *
             */
            limit?: string
            /**
             * A cursor for use in pagination.
             *
             * The cursor that points to the starting item of the next page of results. If not provided, the first page of results is returned.
             *
             */
            after?: string
            /**
             * Search for emission factors (case insensitive). A combination of semantic and keyword search
             * is used to provide the most relevant results.
             *
             */
            name?: string
            /**
             * Filter emission factors based on source.
             * When omitted, all sources are returned.
             *
             */
            source?: Array<EmissionFactorSource>
            /**
             * Filter emission factors based on the publication year.
             */
            publicationYear?: Array<number>
            /**
             * Filter emission factors based on region (case insensitive).
             * When omitted, all regions are returned.
             *
             * The `region_fallback` parameter controls how `region` is interpreted, by default
             * an exact match is required.
             *
             * Countries are included in regions but there are also broader geographic regions like Europe or Asia.
             *
             */
            region?: Array<string>
            /**
             * Controls how `region` is interpreted and if region fallback is performed.
             *
             * Region fallback is looking up emission factors for regions related to the specified
             * regions.
             *
             * * `never` (the default) means no region fallback is performed and only emission
             * factors that match the specified region(s) are returned.
             * * `always` means the emission factors for related regions are unconditionally included
             * in the results.
             *
             */
            regionFallback?: 'never' | 'always'
            /**
             * Filter emission factors based on the logical unit.
             * When omitted, all units are returned.
             *
             */
            unit?: EmissionFactorLogicalUnit
        },
        options?: {
            /**
             * Account Id to be used to perform the API call
             */
            accountId?: string
        },
    ): Promise<Result<SuccessResponse<PaginatedEmissionFactors>, ApiError>> {
        return __request(this.client, this.config, options || {}, {
            method: 'GET',
            url: '/emission-factors',
            query: {
                limit: data?.limit,
                after: data?.after,
                name: data?.name,
                source: data?.source,
                publication_year: data?.publicationYear,
                region: data?.region,
                region_fallback: data?.regionFallback,
                unit: data?.unit,
            },
            errors: {
                400: `The request is invalid. Parameters may be missing or are invalid`,
                401: `The API Key is missing or is invalid`,
                429: `Too many requests have been made in a short period of time`,
                503: `The service is temporarily unavailable. You may retry.`,
            },
        })
    }

    /**
     * List all emission factor regions
     * You may use emission factor regions as a filter when you list emission factors.
     * @param options Additional operation options
     * @returns EmissionFactorRegions OK
     */
    public listAllEmissionFactorRegions(options?: {
        /**
         * Account Id to be used to perform the API call
         */
        accountId?: string
    }): Promise<Result<SuccessResponse<EmissionFactorRegions>, ApiError>> {
        return __request(this.client, this.config, options || {}, {
            method: 'GET',
            url: '/emission-factors/regions',
            errors: {
                400: `The request is invalid. Parameters may be missing or are invalid`,
                401: `The API Key is missing or is invalid`,
                429: `Too many requests have been made in a short period of time`,
            },
        })
    }
}
