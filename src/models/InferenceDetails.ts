// =========================================================================================
//
// This file is AUTO-GENERATED by https://github.com/lune-climate/openapi-typescript-codegen
//
// In most cases you DON'T WANT TO MAKE MANUAL CHANGES to it â€“ they WILL BE OVERWRITTEN.
//
// =========================================================================================

/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { Address } from './Address.js'
import type { AirportCode } from './AirportCode.js'
import type { EmissionStandardRegion } from './EmissionStandardRegion.js'
import type { Locode } from './Locode.js'
import type { NullEnum } from './NullEnum.js'
import type { RoadEmissionStandard } from './RoadEmissionStandard.js'
import type { RoadGradient } from './RoadGradient.js'
import type { RoadSituation } from './RoadSituation.js'
import type { RoadVehicleType } from './RoadVehicleType.js'
import type { ShippingCountryCode } from './ShippingCountryCode.js'

export type InferenceDetails = {
    /**
     * The trade lane Lune has inferred as most likely for the shipment's route.
     */
    tradeLaneFromRoute?: string
    /**
     * Inferred rail transport type based on the shipment's route.
     */
    railTypeFromRoute: {
        railType: InferenceDetails.rail_type
        sourceCountry: string
        destinationCountry: string
    } | null
    /**
     * Routes that have been cleaned, corrected, and had missing parts inferred using a large language model
     */
    cleanedRoute: {
        source: Address | Locode | AirportCode | NullEnum
        destination: Address | Locode | AirportCode | NullEnum
    } | null
    /**
     * The road emission standard trade has inferred via country information in the shipment's route.
     */
    roadEmissionStandard: {
        value: RoadEmissionStandard
        from: InferenceDetails.from
        /**
         * Inferred source country code
         */
        sourceCountryCode: ShippingCountryCode | NullEnum
        /**
         * Inferred destination country code
         */
        destinationCountryCode: ShippingCountryCode | NullEnum
        /**
         * Inferred source country region, present when region information was used to infer the standard
         */
        sourceRegion: EmissionStandardRegion | NullEnum
        /**
         * Inferred destination country region, present when region information was used to infer the standard
         */
        destinationRegion: EmissionStandardRegion | NullEnum
    } | null
    /**
     * The truck type infered via the shipment's route and shipment mass.
     */
    roadTruckType: {
        value: RoadVehicleType
        isInternationalShipment: boolean
    } | null
    /**
     * The road fuel has inferred via source country information in the shipment's route.
     */
    roadFuel: {
        /**
         * The vehicle's infered fuel.
         */
        value: InferenceDetails.value
        /**
         * Inferred source country code
         */
        sourceCountryCode: ShippingCountryCode | NullEnum
        /**
         * Inferred source country region, present when region information was used to infer the standard
         */
        sourceRegion: EmissionStandardRegion | NullEnum
    } | null
    /**
     * The road gradient inferred via elevation data for the shipment's route.
     */
    roadGradient: {
        /**
         * The vehicle's infered gradient.
         */
        value: RoadGradient
    } | null
    /**
     * The road situation inferred via the road types and traffic conditions for the route.
     */
    roadSituation: {
        /**
         * The vehicle's infered situation.
         */
        value: RoadSituation
    } | null
}

export namespace InferenceDetails {
    export enum rail_type {
        ELECTRIC_FREIGHT_TRAIN = 'electric_freight_train',
        DIESEL_FREIGHT_TRAIN = 'diesel_freight_train',
    }

    export enum from {
        SOURCE = 'source',
        DESTINATION = 'destination',
        BOTH = 'both',
    }

    /**
     * The vehicle's infered fuel.
     */
    export enum value {
        GASOLINE = 'gasoline',
        DIESEL = 'diesel',
        _99_DIESEL_1_BIODIESEL = '99_diesel_1_biodiesel',
        _98_DIESEL_2_BIODIESEL = '98_diesel_2_biodiesel',
        _95_DIESEL_5_BIODIESEL = '95_diesel_5_biodiesel',
        _93_DIESEL_7_BIODIESEL = '93_diesel_7_biodiesel',
        _90_DIESEL_10_BIODIESEL = '90_diesel_10_biodiesel',
        _80_DIESEL_20_BIODIESEL = '80_diesel_20_biodiesel',
        _50_DIESEL_50_BIODIESEL = '50_diesel_50_biodiesel',
        ETHANOL_FROM_CORN = 'ethanol_from_corn',
        HVO_FROM_TALLOW = 'hvo_from_tallow',
        LPG = 'lpg',
        CNG = 'cng',
    }
}
